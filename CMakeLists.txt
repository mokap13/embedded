cmake_minimum_required(VERSION 3.8.1)


set(CMAKE_TOOLCHAIN_FILE stm32.cmake)

project(STM32_PROJECT)

enable_language(ASM)

set(STM32_FLASH_SIZE "128K")
set(STM32_RAM_SIZE "20K")
set(STM32_STACK_ADDRESS "0x20005000")

set(STM32_FLASH_ORIGIN "0x08000000")
set(STM32_RAM_ORIGIN "0x20000000")

# Compiler definitions for std. periph. library
# Select your chip type here
SET(CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER")
SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER")
SET(CMAKE_ASM_FLAGS  "${CMAKE_ASM_FLAGS}")

# Startup sources
# Select your chip type here
SET(STARTUP_SOURCE ${STM32_STARTUP_MD})

# Uncomment needed modules
SET(MOD_SOURCES
#  ${STM32_MISC_SOURCE} 
#  ${STM32_ADC_SOURCE}
#  ${STM32_BKP_SOURCE}
#  ${STM32_CAN_SOURCE}
#  ${STM32_CEC_SOURCE}
#  ${STM32_CRC_SOURCE}
#  ${STM32_DAC_SOURCE}
#  ${STM32_DBGMCU_SOURCE}
#  ${STM32_DMA_SOURCE}
#  ${STM32_EXTI_SOURCE}
#  ${STM32_FLASH_SOURCE}
#  ${STM32_FSMC_SOURCE}
  ${STM32_GPIO_SOURCE}
#  ${STM32_I2C_SOURCE}
#  ${STM32_IWDG_SOURCE}
#  ${STM32_PWR_SOURCE}
  ${STM32_RCC_SOURCE}
#  ${STM32_RTC_SOURCE}
#  ${STM32_SDIO_SOURCE}
#  ${STM32_SPI_SOURCE}
#  ${STM32_TIM_SOURCE}
  ${STM32_USART_SOURCE}
#  ${STM32_WWDG_SOURCE}
)

# Project sources
SET(PROJECT_SOURCES
  main.c
  newlib_stubs.c
)

# Default interrupts and system init
SET(SERVICE_SOURCES
  stm32f10x_it.c
  ${STM32_SYSTEM_SOURCE}
)

# Configuring linker script for our target
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/stm32_flash.ld.in ${CMAKE_CURRENT_BINARY_DIR}/stm32_flash.ld)
SET(CMAKE_EXE_LINKER_FLAGS "-T${CMAKE_CURRENT_BINARY_DIR}/stm32_flash.ld ${CMAKE_EXE_LINKER_FLAGS}")

INCLUDE_DIRECTORIES(
  ${CMAKE_CURRENT_SOURCE_DIR}/.
  ${STM32_StdPeriphLib_INCLUDE_DIRS}
)

# Compile executable (*.elf)
ADD_EXECUTABLE(${CMAKE_PROJECT_NAME}.elf ${PROJECT_SOURCES} ${MOD_SOURCES} ${STARTUP_SOURCE} ${SERVICE_SOURCES})

# Convert elf to bin and hex
ADD_CUSTOM_COMMAND(TARGET ${CMAKE_PROJECT_NAME}.elf POST_BUILD COMMAND ${CMAKE_OBJCOPY} ARGS -Oihex ${CMAKE_PROJECT_NAME}.elf ${CMAKE_PROJECT_NAME}.hex)
ADD_CUSTOM_COMMAND(TARGET ${CMAKE_PROJECT_NAME}.elf POST_BUILD COMMAND ${CMAKE_OBJCOPY} ARGS -Obinary ${CMAKE_PROJECT_NAME}.elf ${CMAKE_PROJECT_NAME}.bin)
